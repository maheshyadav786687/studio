
// BLL (Business Logic Layer)
// This layer contains the core business logic.
// It acts as an intermediary between the API layer and the DAL.

'use server';

import { 
    findManyClients, 
    createClient as createDbClient,
    updateClient as updateDbClient,
    deleteClient as deleteDbClient,
    findClientByEmail,
    findClientById
} from '@/lib/dal/client-dal';
import type { Client, ClientFormData } from '@/lib/types';

// The DTOs are now based on the new types from the consolidated types.ts file.
// We are using the ClientFormData type, which omits fields that are
// generated by the database or are not part of the client creation form.
export type ClientCreateDto = ClientFormData;

// For updates, all fields are optional.
export type ClientUpdateDto = Partial<ClientCreateDto>;


// BLL function to get all clients
export async function getClients(): Promise<Client[]> {
  const clients = await findManyClients();
  return clients;
}

// BLL function to get a single client by its ID
export async function getClientById(id: string): Promise<Client | undefined> {
    return await findClientById(id);
}

// BLL function to create a new client
export async function createClient(clientDto: ClientCreateDto): Promise<Client> {
  // Business logic: Check for duplicate emails before creating a new client.
  if (clientDto.Email) {
    const existingClient = await findClientByEmail(clientDto.Email);
    if (existingClient) {
      throw new Error('A client with this email already exists.');
    }
  }

  // The BLL calls the DAL to perform the database operation.
  const newClient = await createDbClient(clientDto);

  return newClient;
}

// BLL function to update an existing client
export async function updateClient(id: string, clientDto: ClientUpdateDto): Promise<Client | undefined> {
  // The BLL calls the DAL to update the client's data.
  const updatedClient = await updateDbClient(id, clientDto);
  
  return updatedClient;
}

// BLL function to delete a client
export async function deleteClient(id: string): Promise<void> {
  // Business logic could be added here, e.g., to check if the client has
  // outstanding projects or invoices before allowing deletion.

  // The BLL calls the DAL to delete the client.
  await deleteDbClient(id);
}
